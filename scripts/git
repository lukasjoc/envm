#!/bin/bash
# Sets up my nice shell prompt with git functionalityG

# get current status of git repo
# SRC: http://ezprompt.net/
parse_git_dirty() {
  local status untracked ahead newfile renamed deleted bits
  status=$(git status 2>&1 | tee)
  dirty=$(echo -n "${status}" 2>/dev/null | grep "modified:" &>/dev/null; echo "$?")
  untracked=$(echo -n "${status}" 2>/dev/null | grep "Untracked files" &>/dev/null; echo "$?")
  ahead=$(echo -n "${status}" 2>/dev/null | grep "Your branch is ahead of" &>/dev/null; echo "$?")
  newfile=$(echo -n "${status}" 2>/dev/null | grep "new file:" &>/dev/null; echo "$?")
  renamed=$(echo -n "${status}" 2>/dev/null | grep "renamed:" &>/dev/null; echo "$?")
  deleted=$(echo -n "${status}" 2>/dev/null | grep "deleted:" &>/dev/null; echo "$?")
  bits=''

  if [ "${renamed}" == "0" ]; then bits="+-${bits}"; fi
  if [ "${ahead}" == "0" ]; then bits="^${bits}"; fi
  if [ "${newfile}" == "0" ]; then bits="++${bits}"; fi
  if [ "${untracked}" == "0" ]; then bits="*${bits}"; fi
  if [ "${deleted}" == "0" ]; then bits="-${bits}"; fi
  if [ "${dirty}" == "0" ]; then bits="*${bits}"; fi
  if [ ! "${bits}" == "" ]; then echo " ${bits}"; else echo ""; fi
}

# get current branch in git repo
parse_git_branch() {
  branch=$(git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
  if [ -n "${branch}" ]; then
    local stat
    stat=$(parse_git_dirty)
    echo "[${branch}${stat}]"
  else
    echo ""
  fi
}

# Shows the current commits dinstanced from the current base branch
# Example: so if the branch was branched of from master it shows the diff from the master in commits to the CURRENT HEAD
git_mine() {
  git lg $(git show-branch | sed "s/].*//" \
    | grep "\*" \
    | grep -v "$(git rev-parse --abbrev-ref HEAD)" \
    | head -n1 \
    | sed "s/^.*\[//")..HEAD
}

# remove local branches that dont have a remote equivalent anymore
remove_merged() {
  git fetch -p
  for br in $(git branch -vv | grep ': gone]' | awk '{print $1}'); do
    git br -d "$br"
  done
}

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# Setup promt like this: (user) :: (hostname) (PWD)$ [branch status ]
export PS1="\[\e[1;32m\]\u\[\e[m\] :: \[\e[1;31m\]\w\[\e[m\] \[\e[1;36m\]\`parse_git_branch\`\[\e[m\] $ "
